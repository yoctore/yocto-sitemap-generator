/* yocto-sitemap-generator - Module that generate sitemap.xml - V0.1.0 */
"use strict";function SitemapGenerator(a){this.logger=a,this.config={},this.schema=require("./modules/schema")(a),this.generator=require("./modules/generator")(a),this.factory=require("./modules/factory")(a),this.scheduler=require("./modules/scheduler")(a)}var logger=require("yocto-logger"),_=require("lodash"),utils=require("yocto-utils"),Q=require("q"),fs=require("fs"),path=require("path");SitemapGenerator.prototype.load=function(a){var b=Q.defer();return this.schema.validate(a,"load").then(function(a){this.config=a,this.logger.info("[ SitemapGenerator.load ] - config load with success"),b.resolve(a)}.bind(this)).catch(function(a){this.logger.error("[ SitemapGenerator.load ] - error when loading module"),b.reject(a)}),b.promise},SitemapGenerator.prototype.generate=function(){var a=Q.defer();return this.logger.info("[ SitemapGenerator.generate ] - generation of xml by crawler will start  with options : "+utils.obj.inspect(this.config.generator)),this.generator.process(this.config.generator).then(function(b){a.resolve(b)}).catch(function(b){a.reject(b)}),a.promise},SitemapGenerator.prototype.process=function(a){var b=Q.defer();return a=a||!1,this.generate().then(function(c){this.logger.info("[ SitemapGenerator.process ] - generate succes so convert it to json"),this.factory.remapSitemap(c,this.config.rules,this.config.generator.url,a).then(function(c){return this.logger.debug("[ SitemapGenerator.process ] - the sitemap was correctly remaped"),a===!1?b.resolve(c):void this.writeFile(c).then(function(){b.resolve(!0)}).catch(function(a){b.reject(a)})}.bind(this)).catch(function(a){this.error("[ SitemapGenerator.process ] - an error occured when remaping sitemap, more details : ",utils.obj.inspect(a)),b.reject(a)})}.bind(this)).catch(function(a){b.reject(a)}),b.promise},SitemapGenerator.prototype.writeFile=function(a){var b=Q.defer(),c=path.normalize(process.cwd()+"/"+this.config.pathFile);return this.logger.info("[ SitemapGenerator.writeFile ] - sitemap generated will be writen into file : "+c),fs.writeFile(c,a,function(c){return c?(this.logger.info("[ SitemapGenerator.writeFile ] - an error occured when writting file, more details : "+utils.obj.inspect(c)),b.reject(c)):(this.logger.info("[ SitemapGenerator.writeFile ] - sitemap was correctly written into file"),void b.resolve(a))}.bind(this)),b.promise},SitemapGenerator.prototype.enableScheduler=function(){var a=Q.defer();if(_.isEmpty(this.config.scheduler)){var b="This scheduler have no configuration";return this.logger.error("[ SitemapGenerator.enableScheduler ] - "+b),a.reject(b),a.promise}return this.scheduler.enable(this.config.scheduler,this).then(function(){this.logger.debug("[ SitemapGenerator.enableScheduler ] - the enableScheduler was correctly  configured, the cron rule is : "+this.config.scheduler.cronRule),a.resolve(!0)}.bind(this)).catch(function(b){this.error("[ SitemapGenerator.enableScheduler ] - an error occured when configure scheduler, more details : ",utils.obj.inspect(b)),a.reject(b)}),a.promise},module.exports=function(a){return(_.isUndefined(a)||_.isNull(a))&&(logger.warning("[ SitemapGenerator.constructor ] - Invalid logger given. Use internal logger"),a=logger),new SitemapGenerator(a)};